# For licensing see accompanying LICENSE file.
# Copyright (C) 2024 Apple Inc. All Rights Reserved.
# Adapted from: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "tool_sandbox"
version = "0.0.1"
description = "A controllable, stateful and interactive sandbox for agent evaluation"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Jiarui Lu", email = "jiarui_lu@apple.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "anthropic==0.26.1",
    "ccy==1.3.1",
    "decorator==5.1.1",
    "dill==0.3.8",
    "geopy==2.4.1",
    "holidays==0.51",
    "huggingface_hub==0.23.4",
    "jsonschema==4.19.2",
    "jupyter>=1.1.1",
    "langchain==0.1.3",
    "networkx==3.2.1",
    "numpy==1.26.4",
    "openai>=1.97.1",
    "pandas>=2.3.1",
    "phonenumbers==8.13.39",
    "pint==0.23",
    "polars==0.20.31",
    "pydantic==2.7.4",
    "pyyaml==6.0.1",
    "rapidfuzz==3.9.3",
    "requests==2.32.3",
    "rouge-score==0.1.2",
    "scipy==1.13.1",
    "sentencepiece==0.2.0",
    "StrEnum==0.4.15",
    "tenacity==8.4.1",
    "transformers==4.41.2",
    "tree-sitter==0.22.3",
    "tree-sitter-languages==1.10.2",
    "typing_extensions==4.12.2",
    "vertexai==1.49.0",
]

[project.urls]
Homepage = "https://github.pie.apple.com/foundation-models/ToolSandbox"
Issues = "https://github.pie.apple.com/foundation-models/ToolSandbox/issues"


[project.optional-dependencies]
dev = [
    "genbadge[all]",
    "google-auth-stubs",
    "mypy",
    "pre-commit",
    "pyarrow==16.1.0", # < for converting polars to pandas dataframes
    "pydantic-extra-types",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
    "seaborn==0.13.2",
    "types-decorator",
    "types-networkx",
    "types-requests",
    "types-tornado",
    "types-tqdm",
    "types-PyYAML",
]

[project.scripts]
tool_sandbox = "tool_sandbox.cli:main"

[tool.setuptools.packages.find]
exclude = ["data/"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
# Same excludes as black
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".github",
    ".cursorrules",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # ---- project specific ----
    # Exclude tools so they don't get the __future__ imports
    "data/*",
    "scripts/**",
    "notebooks/**",
    "tests/**",
]

target-version = "py312"
line-length = 120
indent-width = 4

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "W",    # pycodestyle warnings
    "D",    # pycodestyle docstrings
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "N",    # pep8-naming
    "ANN",  # flake8-annotations
    "PT",   # flake8-pytest-style
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "PYI",  # flake8-pyi
]
ignore = [
    "E722",  # Equivalent to pylint's broad-except-caught (W0718)
    "B023",  # Roughly equivalent to logging-fstring-interpolation (W1203)
    "E501",  # Line too long (handled by formatter)
    "TRY003",  # Tryceratops: long raise message
    "F841", # Unused variable (ported from ToolSandbox)
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "ANN101", # Missing type annotation in for self
    "ANN102", # Missing type annotation in for cls
]
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["tool_sandbox"]

[tool.ruff.lint.per-file-ignores]
# Ignore `F401` (unusesd import) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format=true

# Configure pytest to parallelize test execution. This configuration is used e.g.
# - by VSCode's built-in testing extension
# - when running `pytest .` on the command line
[tool.pytest.ini_options]
addopts="-n auto"

[tool.mypy]
python_version = "3.12"
namespace_packages = true
# The options below are what `--strict` encompasses.
no_implicit_optional = true
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
extra_checks = true
implicit_reexport = false
strict_equality = true
warn_unused_configs = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
files = ["tool_sandbox"]
exclude = [
    "data/*",
    "scripts/*",
    "notebooks/*",
    "tests/*",
]

[tool.pyright]
typeCheckingMode = "off"
ignore = ["*"]
